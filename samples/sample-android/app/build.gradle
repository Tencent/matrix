apply plugin: 'com.google.osdetector'

ext.removeUnusedResourcesV2Enable = true

import com.google.gson.Gson
import com.google.gson.JsonArray

import com.tencent.matrix.plugin.compat.AgpCompat

apply plugin: 'com.android.application'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    signingConfigs {
        debug {
            storeFile file("./keystore/debug.keystore")
        }
        release {
            storeFile file("./keystore/debug.keystore")
        }
    }

    defaultConfig {
        applicationId "sample.tencent.matrix"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }

    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libwechatbacktrace.so'
        pickFirst 'lib/arm64-v8a/libwechatbacktrace.so'
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {

        // Encapsulates your CMake build configurations.
        cmake {

            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            jniLibs {
                setSrcDirs (['./libs'] as Set)
            }
        }

    }

    if (!removeUnusedResourcesV2Enable) {
        applicationVariants.all { variant ->
            if (variant.name.equalsIgnoreCase("debug")) {
                packageDebug.doLast {
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    println configurations.apkCheckerDependency.getAt(0).getAbsolutePath()
                    processBuilder.command("java",
                            "-jar", configurations.apkCheckerDependency.getAt(0).getAbsolutePath(),
                            "--apk", variant.outputs.first().outputFile.getAbsolutePath(),
                            "--output", project.getProjectDir().getAbsolutePath() + "/unused_resources",
                            "--format", "json",
                            "-unusedResources", "--rTxt", project.getBuildDir().getAbsolutePath() + "/intermediates/${AgpCompat.getIntermediatesSymbolDirName.invoke()}/${variant.name}/R.txt");
                    Process process = processBuilder.start();
                    process.waitFor()
                    println process.inputStream.text
                    println process.errorStream.text
                    File outputFile = new File(project.getProjectDir().getAbsolutePath() + "/unused_resources.json");
                    if (outputFile.exists()) {
                        Gson gson = new Gson();
                        JsonArray jsonArray = gson.fromJson(outputFile.text, JsonArray.class);
                        for (int i = 0; i < jsonArray.size(); i++) {
                            if (jsonArray.get(i).asJsonObject.get("taskType").asInt == 12) {
                                JsonArray resList = jsonArray.get(i).asJsonObject.get("unused-resources").asJsonArray;
                                for (int j = 0; j < resList.size(); j++) {
                                    project.ext.unusedResourcesSet.add(resList.get(j).asString);
                                }
                                println "find unused resources:\n" + unusedResourcesSet
                                break;
                            }
                        }
                        outputFile.delete();
                    }
                }
            }
        }
    }

}

configurations {
    apkCheckerDependency
    sevenZipDependency
}

if (useLocalMaven()) {
    apply from: project.file('dependencies-src.gradle')
} else {
    apply from: project.file('dependencies-aar.gradle')
}

if (!removeUnusedResourcesV2Enable) {
    project.ext.unusedResourcesSet = new HashSet<String>()
}

apply plugin: 'com.tencent.matrix-plugin'
matrix {

    logLevel "D"

    trace {
        enable = false
        baseMethodMapFile = "${project.projectDir}/matrixTrace/methodMapping.txt"
        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
    }
    removeUnusedResources {
        variant = "debug"

        v2 = removeUnusedResourcesV2Enable

        if (!v2) {
            unusedResources = project.ext.unusedResourcesSet
        }

        enable true
        needSign true
        shrinkArsc true
        shrinkDuplicates true
        use7zip = true
        zipAlign = true
        embedResGuard true

        apkCheckerPath = "${project.configurations.apkCheckerDependency.resolve().find { it.name.startsWith("matrix-apk-canary") }.getAbsolutePath()}"
        sevenZipPath = "${project.configurations.sevenZipDependency.resolve().getAt(0).getAbsolutePath()}"
        //Notice: You need to modify the  value of $apksignerPath on different platform. the value below only suitable for Mac Platform,
        //if on Windows, you may have to  replace apksigner with apksigner.bat.
        apksignerPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${android.getBuildToolsVersion()}/apksigner"
        zipAlignPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${android.getBuildToolsVersion()}/zipalign"
        ignoreResources = ["R.id.*", "R.bool.*", "R.layout.unused_layout"]
    }
}

project.tasks.whenTaskAdded {
    if (it.name?.equals("assembleDebug") || it.name?.equals("assembleRelease")) {
        it.dependsOn "cleanBuildDirTask".with { taskName ->
            if (tasks.findByName(taskName)) {
                return tasks.findByName(taskName)
            }
            return task(taskName) {
                doFirst {
                    logger.lifecycle "Clean app bulid dir before assemble"
                    project.file(project.buildDir).deleteDir()
                }
            }
        }
    }
}
