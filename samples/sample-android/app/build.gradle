import com.google.gson.JsonArray
import com.google.gson.Gson

apply plugin: 'com.android.application'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.2"

    signingConfigs {
        debug {
            storeFile file("./keystore/debug.keystore")
        }
    }

    defaultConfig {
        applicationId "sample.tencent.matrix"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        if (variant.name.equalsIgnoreCase("debug")) {
            packageDebug.doLast {
                ProcessBuilder processBuilder = new ProcessBuilder();
                println configurations.apkCheckerDependency.getAt(0).getAbsolutePath()
                processBuilder.command("java",
                        "-jar", configurations.apkCheckerDependency.getAt(0).getAbsolutePath(),
                        "--apk", variant.outputs.first().outputFile.getAbsolutePath(),
                        "--output", project.getProjectDir().getAbsolutePath() + "/unused_resources",
                        "--format", "json",
                        "-unusedResources", "--rTxt", project.getBuildDir().getAbsolutePath() + "/intermediates/symbols/${variant.name}/R.txt");
                Process process = processBuilder.start();
                process.waitFor();
                File outputFile = new File(project.getProjectDir().getAbsolutePath() + "/unused_resources.json");
                if (outputFile.exists()) {
                    Gson gson = new Gson();
                    JsonArray jsonArray = gson.fromJson(outputFile.text, JsonArray.class);
                    for (int i = 0; i < jsonArray.size(); i++) {
                        if (jsonArray.get(i).asJsonObject.get("taskType").asInt == 12) {
                            JsonArray resList = jsonArray.get(i).asJsonObject.get("unused-resources").asJsonArray;
                            for (int j = 0; j < resList.size(); j++) {
                                project.ext.unusedResourcesSet.add(resList.get(j).asString);
                            }
                            println "find unused resources:\n" + unusedResourcesSet
                            break;
                        }
                    }
                    outputFile.delete();
                }
            }
        }
    }
}

ext.unusedResourcesSet = new HashSet<String>();

configurations {
    apkCheckerDependency
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: "com.tencent.matrix", name: "matrix-commons", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-android-lib", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-android-commons", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-trace-canary", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-android", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-common", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-io-canary", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-sqlite-lint-android-sdk", version: MATRIX_VERSION, changing: true
    releaseImplementation group: "com.tencent.matrix", name: "matrix-sqlite-lint-android-sdk-no-op", version: MATRIX_VERSION, changing: true

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    apkCheckerDependency group: "com.tencent.matrix", name: "matrix-apk-canary", version:MATRIX_VERSION, changing: true
    
    testImplementation 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

apply plugin: 'com.tencent.matrix-plugin'
matrix {
    trace {
        enable = true
        baseMethodMapFile = "${project.projectDir}/matrixTrace/methodMapping.txt"
        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
    }
    removeUnusedResources {
        enable true
        variant = "debug"
        needSign true
        shrinkArsc true
        //Notice: You need to modify the  value of $apksignerPath on different platform. the value below only suitable for Mac Platform,
        //if on Windows, you may have to  replace apksigner with apksigner.bat.
        apksignerPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${android.getBuildToolsVersion()}/apksigner"
        unusedResources = project.ext.unusedResourcesSet
        ignoreResources = ["R.id.*", "R.bool.*"]
    }
}
