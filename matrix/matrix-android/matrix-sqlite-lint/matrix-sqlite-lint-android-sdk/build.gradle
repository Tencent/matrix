apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName rootProject.ext.VERSION_NAME

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                arguments "-Dplatform=android"
            }
            ndk {
                abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    sourceSets {
        full {
            jni.srcDirs = ['cpp']
        }
        stub {
            jniLibs.srcDirs = []
        }
    }
    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
        }
    }

    flavorDimensions 'mode'
    productFlavors {
        full {
            ext.artifactIdSuffix = ''
            dimension 'mode'
        }

        stub {
            dimension 'mode'
            ext.artifactIdSuffix = 'no-op'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:23.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:27.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'

    implementation project(':matrix-android-lib')
    implementation project(':matrix-android-commons')
}

version = rootProject.ext.VERSION_NAME
group = rootProject.ext.GROUP

if("External" == rootProject.ext.PUBLISH_CHANNEL) {
    apply from: rootProject.file('gradle/android-publish.gradle')
}
else {
    apply from: rootProject.file('gradle/WeChatPublish.gradle')
    apply from: rootProject.file('gradle/WeChatNativeDepend.gradle')
    wechatPublish {
        artifactId = POM_ARTIFACT_ID
    }
}

// TODO: disable externalNativeBuild for stub flavor
afterEvaluate {
    tasks.all { task ->
        if (task.name.startsWith('externalNativeBuildStub')) {
            enabled false
        }
    }
}