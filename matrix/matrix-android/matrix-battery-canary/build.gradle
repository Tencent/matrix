apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName rootProject.ext.VERSION_NAME

        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        // testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.8.9"
    testImplementation 'org.jmockit:jmockit:1.28'
    testImplementation 'com.google.code.gson:gson:2.8.6'
    androidTestImplementation 'commons-io:commons-io:2.6'
    // androidTestImplementation 'androidx.core:core:1.3.2'
    androidTestImplementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation('androidx.multidex:multidex-instrumentation:2.0.0')
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation "org.mockito:mockito-core:2.8.9"
    androidTestImplementation "org.mockito:mockito-android:2.8.9"

    implementation project(':matrix-android-lib')
    api project(path: ':matrix-trace-canary')
    implementation 'com.tencent:mmkv:1.2.11'

    api "androidx.appcompat:appcompat:1.1.0"
    api 'androidx.recyclerview:recyclerview:1.1.0'
}

version = rootProject.ext.VERSION_NAME
group = rootProject.ext.GROUP

if (rootProject.file('gradle/WeChatPublish.gradle').exists()) {
    if("External" == rootProject.ext.PUBLISH_CHANNEL) {
        apply from: rootProject.file('gradle/android-publish.gradle')
    }
    else {
        apply from: rootProject.file('gradle/WeChatPublish.gradle')
        apply from: rootProject.file('gradle/WeChatNativeDepend.gradle')
        wechatPublish {
            artifactId = POM_ARTIFACT_ID
        }
    }
}


apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

afterEvaluate {
    if (isAndroidModule()) {
        setupAndroidReporting()
    } else {
        setupKotlinReporting()
    }
}

def isAndroidModule() {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}


def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false // change if needed
            xml.enabled false // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses true
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }

        // Change as needed
        def mainSrc = "$projectDir/src/main/java"
        def fileFilter = [
                '**/*App.*',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/*JsonAdapter.*', // adapters generated by Moshi
                '**/di/**',
                '**/*Dagger.*',
                '**/R$**.*',
                '**/BuildConfig.*',
        ]
        def debugClassesDir = fileTree(
                dir: "$buildDir/intermediates/javac/debug",
                excludes: fileFilter
        )
        additionalSourceDirs(files([mainSrc]))
        additionalClassDirs(files([debugClassesDir]))
        executionData(fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        ))
    }
}
